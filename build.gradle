description = "Kryptnostic libraries for fully homomorphic encryption."

allprojects {
    //Easy semantic version based off describe + tags
    def getVersionName = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty', '--long'
            standardOutput = stdout
        }
        def tagVer = stdout.toString().trim()
        def semVer = (tagVer =~ /v([\d\.]+)/)[0][1]

        if (tagVer.contains('dev')) {
            semVer += "-SNAPSHOT"
        }

        return semVer
    }

    group = "com.kryptnostic"
    version = getVersionName()

    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "idea"
    apply plugin: "jacoco"
    apply plugin: "maven-publish"

    task wrapper(type: Wrapper) {
        gradleVersion = '2.4'
    }

    test {
        if (project.hasProperty('maxParallelForks'))
            maxParallelForks = project.maxParallelForks as int
        if (project.hasProperty('forkEvery'))
            forkEvery = project.forkEvery as int
        testLogging {
          events "passed", "skipped", "failed"
        }
    }

    task sourcesJar (type : Jar) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }

    ext.standaloneMode = true

    sourceCompatibility=JavaVersion.VERSION_1_7
    targetCompatibility=JavaVersion.VERSION_1_7

    ext.jackson_version='2.6.1'
}

subprojects {
    apply plugin: 'eclipse'
    apply from: 'publish.gradle'

    eclipse {
        ext.sourceCompatibility=JavaVersion.VERSION_1_7
        ext.targetCompatibility=JavaVersion.VERSION_1_7
        ext.downloadSources = true
        ext.downloadJavadoc = true
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "http://repo.maven.apache.org/maven2"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        /*
         * SL4J + LOG4J
         * Currently use Log4J through sl4j.
         * TODO: Switch to logback
         */
        compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.6'
        compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.6'

    //    compile "ch.qos.logback:logback-classic:1.0.13"
        compile "log4j:log4j:1.2.17"

        /*
         * Metrics
         * Awesome reporting-- defaults to Graphite
         * TODO: Integrate Ryan's Spring integration
         */
        compile 'com.codahale.metrics:metrics-core:3.0.2'
        compile 'com.codahale.metrics:metrics-graphite:3.0.2'

        /*
         JODA TIME - A better datetime class.
         */
        compile 'joda-time:joda-time:2.3'

        /*
         * JACKSON SERIALIZATION
         * YAML via SnakeYaml
         * Afterburner for faster serialization
         * Guava integration
         * Smile for binary serialization
         * Jersey integration
         * Jaxb annotation support
         */
        compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
        compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
        compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
        compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
        compile 'org.yaml:snakeyaml:1.13'

        /*
         * @Inject and @Nullable support
         */
        compile 'javax.inject:javax.inject:1'
        compile 'com.google.code.findbugs:jsr305:1.3.9'

        /*
         * Linear algebra including GF(2) matrices
         * TODO: Move to a separate plugin / remove from core
         */
        compile 'colt:colt:1.2.0'

        /*
         * Kryo serialization -- faster generic Java serialization
         */
        compile 'com.esotericsoftware.kryo:kryo:2.22'

        /*
         * APACHE COMMONS
         * Logging, StringUtils, RandomStringUtils, IOUtils, and more
         */
        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.commons:commons-lang3:3.1'
        compile 'commons-logging:commons-logging:1.1.3'
        compile 'commons-collections:commons-collections:3.2.1'

    }
}
